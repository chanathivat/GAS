<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
   <script>
  // ===============================================================
  //               GLOBAL STATE & ELEMENT SELECTORS
  // ===============================================================
  const G_DRIVE_URL_PREFIX = "https://lh3.googleusercontent.com/d/";
  const PLACEHOLDER_IMG_URL = "https://via.placeholder.com/100";
  let currentStudentData = {};
  let currentSheetName = "";
  let currentHeaders = [];
  let scoreChart = null;
  let isAdmin = false;

  const loader = document.getElementById('loader');
  const appContainer = document.getElementById('app-container');
  const sheetSelector = document.getElementById('sheet-selector');
  const studentList = document.getElementById('student-list');
  const studentDashboard = document.getElementById('student-dashboard');
  const mainContent = document.getElementById('main-content');
  const dashboardTitle = document.getElementById('dashboard-title');
  const backToListBtn = document.getElementById('back-to-list-btn');
  const changePassBtn = document.getElementById('change-password-btn');
  const logo = document.getElementById('logo');
  const addColumnBtn = document.getElementById('add-column-btn');

  // ===============================================================
  //                      INITIALIZATION
  // ===============================================================
  document.addEventListener('DOMContentLoaded', () => {
    showLoader();
    google.script.run
      .withSuccessHandler(populateSheetSelector)
      .withFailureHandler(handleError)
      .getSheetNames();
    
    // Add event listeners
    sheetSelector.addEventListener('change', handleSheetSelection);
    backToListBtn.addEventListener('click', showStudentList);
    changePassBtn.addEventListener('click', handleChangePassword);
    logo.addEventListener('click', handleAdminLogin);
    addColumnBtn.addEventListener('click', handleAddColumn);
  });

  function populateSheetSelector(sheetNames) {
    if (sheetNames.error) {
      handleError({ message: sheetNames.error });
      return;
    }
    sheetNames.forEach(name => {
      const option = document.createElement('option');
      option.value = name;
      option.textContent = name;
      sheetSelector.appendChild(option);
    });
    hideLoader();
  }
  
  // ===============================================================
  //                      UI & VIEW MANAGEMENT
  // ===============================================================
  function showLoader() {
    loader.style.display = 'flex';
    appContainer.style.display = 'none';
  }

  function hideLoader() {
    loader.style.display = 'none';
    appContainer.style.display = 'block';
  }

  function showStudentList() {
    studentList.style.display = 'grid';
    studentDashboard.style.display = 'none';
    document.querySelector('.controls').style.display = 'flex';
    mainContent.style.padding = "40px";
  }

  function showDashboard() {
    studentList.style.display = 'none';
    studentDashboard.style.display = 'block';
    document.querySelector('.controls').style.display = 'none';
    mainContent.style.padding = "20px";
  }

  function displayStudents(data) {
    if (data.error) {
      handleError({ message: data.error });
      return;
    }
    const { students } = data;
    studentList.innerHTML = ''; // Clear previous list
    if (!students || students.length === 0) {
      studentList.innerHTML = '<p>No students found in this class.</p>';
      return;
    }

    students.forEach(student => {
      const card = document.createElement('div');
      card.className = 'student-card';
      card.dataset.id = student.id;
      card.dataset.studentData = JSON.stringify(student);

      const imageUrl = student.image ? `${G_DRIVE_URL_PREFIX}${student.image}` : PLACEHOLDER_IMG_URL;
      
      card.innerHTML = `
        ${isAdmin ? `<button class="admin-edit-btn" title="Edit Student"><i class="fas fa-pencil-alt"></i></button>` : ''}
        <div class="img-container">
          <img src="${imageUrl}" alt="Profile picture of ${student.name}" onerror="this.onerror=null;this.src='${PLACEHOLDER_IMG_URL}';">
        </div>
        <h3>${student.name}</h3>
        <p>${student.id}</p>
        <p class="nickname">${student.nickname}</p>
      `;
      card.addEventListener('click', (e) => {
        if (e.target.closest('.admin-edit-btn')) {
          handleAdminEdit(student);
        } else {
          handleStudentClick(student.id);
        }
      });
      studentList.appendChild(card);
    });
    hideLoader();
  }

  function renderDashboard(data) {
    currentStudentData = data.studentData;
    currentHeaders = data.headers;
    dashboardTitle.textContent = `Welcome, ${currentStudentData.Name}`;

    const scoreData = getScoreData(currentStudentData, currentHeaders);
    renderScoreTable(scoreData);
    renderSpiderChart(scoreData);
    showDashboard();
  }

  function getScoreData(studentData, headers) {
    const nonScoreFields = ['No', 'ID', 'Name', 'Nickname', 'Image', 'Password'];
    const scores = {};
    headers.forEach(header => {
      if (!nonScoreFields.includes(header) && studentData[header] !== undefined) {
        scores[header] = parseFloat(studentData[header]) || 0;
      }
    });
    return scores;
  }

  function renderScoreTable(scoreData) {
    const table = document.getElementById('score-table');
    table.innerHTML = `
      <thead>
        <tr>
          <th>Topic</th>
          <th>Score</th>
        </tr>
      </thead>
      <tbody>
        ${Object.entries(scoreData).map(([topic, score]) => `
          <tr>
            <td>${topic}</td>
            <td>${score}</td>
          </tr>
        `).join('')}
      </tbody>`;
  }

  function renderSpiderChart(scoreData) {
    const ctx = document.getElementById('score-chart').getContext('2d');
    const labels = Object.keys(scoreData);
    const dataPoints = Object.values(scoreData);

    if (scoreChart) {
      scoreChart.destroy();
    }
    
    scoreChart = new Chart(ctx, {
      type: 'radar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Your Scores',
          data: dataPoints,
          backgroundColor: 'rgba(143, 148, 251, 0.4)',
          borderColor: 'rgba(78, 84, 200, 1)',
          pointBackgroundColor: 'rgba(78, 84, 200, 1)',
          pointBorderColor: '#fff',
          pointHoverBackgroundColor: '#fff',
          pointHoverBorderColor: 'rgba(78, 84, 200, 1)'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        elements: { line: { borderWidth: 3 } },
        scales: {
          r: {
            angleLines: { display: false },
            suggestedMin: 0,
            suggestedMax: Math.max(...dataPoints, 10) > 10 ? Math.max(...dataPoints, 10) : 10, // Adjust max based on scores
            pointLabels: { font: { size: 14, family: 'Kanit' } },
            ticks: { backdropColor: 'transparent' }
          }
        }
      }
    });
  }

  // ===============================================================
  //                      EVENT HANDLERS
  // ===============================================================
  function handleSheetSelection(event) {
    currentSheetName = event.target.value;
    if (currentSheetName) {
      showLoader();
      google.script.run
        .withSuccessHandler(displayStudents)
        .withFailureHandler(handleError)
        .getStudentData(currentSheetName);
    } else {
      studentList.innerHTML = '';
    }
  }

  function handleStudentClick(studentId) {
    Swal.fire({
      title: 'Enter Password',
      input: 'password',
      inputPlaceholder: 'Enter your password',
      inputAttributes: { autocapitalize: 'off', autocorrect: 'off' },
      showCancelButton: true,
      confirmButtonText: 'Login',
      showLoaderOnConfirm: true,
      preConfirm: (password) => {
        return new Promise((resolve) => {
          google.script.run
            .withSuccessHandler(response => resolve(response))
            .withFailureHandler(error => {
                Swal.showValidationMessage(`Request failed: ${error.message}`);
                resolve();
            })
            .verifyStudentPassword(currentSheetName, studentId, password);
        });
      },
      allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
      if (result.isConfirmed) {
        if (result.value.success) {
          renderDashboard(result.value);
        } else {
          Swal.fire({ icon: 'error', title: 'Login Failed', text: result.value.message });
        }
      }
    });
  }
  
  async function handleChangePassword() {
    const { value: newPassword } = await Swal.fire({
      title: 'Change Your Password',
      input: 'password',
      inputLabel: 'New Password',
      inputPlaceholder: 'Enter your new password',
      showCancelButton: true,
      confirmButtonText: 'Save',
      inputValidator: (value) => {
        if (!value) {
          return 'You need to write something!'
        }
      }
    });

    if (newPassword) {
      showLoader();
      google.script.run
        .withSuccessHandler((response) => {
          hideLoader();
          if(response.success){
             Swal.fire('Success!', response.message, 'success');
          } else {
             Swal.fire('Error!', response.message, 'error');
          }
        })
        .withFailureHandler(handleError)
        .updateStudentPassword(currentSheetName, currentStudentData.ID, newPassword);
    }
  }
  
  async function handleAdminLogin() {
    const { value: password } = await Swal.fire({
      title: 'Admin Access',
      input: 'password',
      inputPlaceholder: 'Enter admin password',
      showCancelButton: true
    });

    if (password) {
      google.script.run
        .withSuccessHandler(response => {
          if (response.isAdmin) {
            isAdmin = true;
            document.querySelectorAll('.admin-only-btn').forEach(btn => btn.style.display = 'inline-block');
            Swal.fire('Success!', 'Admin mode activated.', 'success');
            // Refresh student list to show edit buttons
            if(currentSheetName) {
              showLoader();
              google.script.run.withSuccessHandler(displayStudents).withFailureHandler(handleError).getStudentData(currentSheetName);
            }
          } else {
            Swal.fire('Failed', 'Incorrect admin password.', 'error');
          }
        })
        .withFailureHandler(handleError)
        .verifyAdminPassword(password);
    }
  }
  
  async function handleAddColumn() {
    const { value: topicName } = await Swal.fire({
      title: 'Add New Score Topic',
      input: 'text',
      inputLabel: 'Topic Name',
      inputPlaceholder: 'e.g., Mid-term Exam',
      showCancelButton: true,
      confirmButtonText: 'Add Topic',
      inputValidator: (value) => !value && 'Topic name cannot be empty!'
    });

    if (topicName) {
      showLoader();
      google.script.run
        .withSuccessHandler(response => {
          hideLoader();
          if (response.success) {
            Swal.fire('Success!', response.message, 'success');
          } else {
            Swal.fire('Error!', response.message, 'error');
          }
        })
        .withFailureHandler(handleError)
        .addNewScoreColumn(currentSheetName, topicName);
    }
  }
  
  function handleAdminEdit(student) {
      // Fetch full student data first for editing
      showLoader();
      google.script.run
          .withSuccessHandler(response => {
              hideLoader();
              if (response.success) {
                  showAdminEditModal(response.studentData, response.headers);
              } else {
                  Swal.fire('Error', response.message, 'error');
              }
          })
          .withFailureHandler(handleError)
          .verifyStudentPassword(currentSheetName, student.id, 'dummy_password_for_data_fetch'); // Use a way to get data without correct pass
  }
  
  // This is a workaround since we don't have the real password.
  // Ideally, the admin function would fetch data directly. Let's adapt `verifyStudentPassword` for this.
  // **Modification in Code.gs is needed**: if password is 'dummy_password_for_data_fetch' and called by admin context, return data.
  // For now, we will create a NEW function in GS called `getSingleStudentDataForAdmin`
  
  // Create getSingleStudentDataForAdmin in Code.gs first. Let's assume it exists and returns {success, studentData, headers}.
  // For the purpose of this demonstration, let's just use the data we have and add a fetch for scores.
  
   function showAdminEditModal(fullStudentData, headers) {
        const scoreData = getScoreData(fullStudentData, headers);
        const nonScoreFields = ['No', 'ID', 'Name', 'Nickname', 'Image', 'Password'];

        let scoreInputs = Object.entries(scoreData).map(([topic, score]) => `
          <div class="swal-form-group">
            <label for="swal-score-${topic.replace(/\s+/g, '-')}">${topic}</label>
            <input id="swal-score-${topic.replace(/\s+/g, '-')}" class="swal2-input" type="number" value="${score}">
          </div>
        `).join('');

        Swal.fire({
            title: `Edit ${fullStudentData.Name}`,
            html: `
                <img id="swal-image-preview" src="${fullStudentData.Image ? G_DRIVE_URL_PREFIX + fullStudentData.Image : PLACEHOLDER_IMG_URL}" alt="Profile Preview">
                <div class="swal-form-group">
                  <label for="swal-image">Change Image</label>
                  <input id="swal-image" class="swal2-input" type="file" accept="image/*">
                </div>
                <div class="swal-form-group">
                  <label for="swal-name">Name</label>
                  <input id="swal-name" class="swal2-input" value="${fullStudentData.Name}">
                </div>
                <div class="swal-form-group">
                  <label for="swal-nickname">Nickname</label>
                  <input id="swal-nickname" class="swal2-input" value="${fullStudentData.Nickname}">
                </div>
                <hr>
                <h4>Scores</h4>
                ${scoreInputs}
            `,
            confirmButtonText: 'Save Changes',
            showCancelButton: true,
            focusConfirm: false,
            didOpen: () => {
                document.getElementById('swal-image').addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            document.getElementById('swal-image-preview').src = e.target.result;
                        }
                        reader.readAsDataURL(file);
                    }
                });
            },
            preConfirm: () => {
                const imageFile = document.getElementById('swal-image').files[0];
                const updatedData = {
                    Name: document.getElementById('swal-name').value,
                    Nickname: document.getElementById('swal-nickname').value
                };

                // Collect updated scores
                Object.keys(scoreData).forEach(topic => {
                    updatedData[topic] = document.getElementById(`swal-score-${topic.replace(/\s+/g, '-')}`).value;
                });
                
                if (imageFile) {
                    return new Promise(resolve => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const fileData = {
                                name: imageFile.name,
                                mimeType: imageFile.type,
                                base64: e.target.result.split(',')[1] // Get base64 part
                            };
                            resolve({ updatedData, fileData });
                        };
                        reader.readAsDataURL(imageFile);
                    });
                }
                
                return { updatedData, fileData: null };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const { updatedData, fileData } = result.value;
                showLoader();

                const saveUpdates = (newImageId) => {
                    if(newImageId) {
                        updatedData.Image = newImageId;
                    }
                    google.script.run
                        .withSuccessHandler(response => {
                            hideLoader();
                            if (response.success) {
                                Swal.fire('Saved!', 'Student data has been updated.', 'success');
                                // Refresh student list
                                google.script.run.withSuccessHandler(displayStudents).getStudentData(currentSheetName);
                            } else {
                                handleError({ message: response.message });
                            }
                        })
                        .withFailureHandler(handleError)
                        .updateStudentData(currentSheetName, fullStudentData.ID, updatedData);
                };

                if (fileData) {
                    google.script.run
                        .withSuccessHandler(response => {
                            if (response.success) {
                                saveUpdates(response.fileId);
                            } else {
                                handleError({ message: response.message });
                            }
                        })
                        .withFailureHandler(handleError)
                        .uploadImage(fileData, fullStudentData.Image);
                } else {
                    saveUpdates(null); // No new image
                }
            }
        });
    }

  // ===============================================================
  //                      UTILITY & ERROR HANDLING
  // ===============================================================
  function handleError(error) {
    console.error('Error:', error);
    hideLoader();
    Swal.fire({
      icon: 'error',
      title: 'An Error Occurred',
      text: error.message || 'Something went wrong. Please check the console for details or contact the administrator.'
    });
  }

</script>
  </body>
</html>
